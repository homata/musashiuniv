プログラミング基礎A/コンピューティング応用E
----

2025年度 M1830 プログラミング基礎A/コンピューティング応用E [集中]  春学期
小俣　博司  

授業：**105分×13回**  
1. 7月28日（月）2～4時限
2. 7月29日（火）2～4時限
3. 7月30日（水）2～4時限
4. 7月31日（木）1～4時限
実施場所: 1001教室

**授業時間**  
* 1限　9:00-10:45  
* 2限　10:55-12:40  
* 3限　13:25-15:10  
* 4限　15:20-17:05  
* 5限　17:15-19:00  
* 6限　19:10-20:55  

**スケジュール**  
| 回     | 内容                                               |
|:-------|:--------------------------------------------------|
| 第1回  | オリエンテーション・環境構築                         |
| 第2回  | コンピューターとプログラミングの基本                  |
| 第3回  | Pythonの基礎                                       |
| 第4回  | 数値演算、変数と関数                                |
| 第5回  | データ構造（数値、⽂字列、リスト、辞書）              |
| 第6回  | 条件分岐、ファイル⼊出⼒の基本                       |
| 第7回  | テスト・デバッグ、コードスタイル                     |
| 第8回  | 制御フロー（条件分岐、繰り返し、イテレータ、内包表記） |
| 第9回  | 関数と例外処理（オブジェクト、クラス、例外処理）      | 
| 第10回 | Pythonのライブラリ・パッケージ（演算系）             |
| 第11回 | Pythonのライブラリ・パッケージ（グラフ可視化）        | 
| 第12回 | Web APIの利活⽤                                    |
| 第13回 | 総合演習・発表                                      |


**授業内容(予定)**  
* 第1回: オリエンテーション・環境構築
    * 準備
    * 画面表示とキーボード入力
* 第2回: コンピューターとプログラミングの基本
* 第3回: Pythonの基礎
    * Pyhtonの基本
    * モジュールとパッケージ
* 第4回: 数値演算、変数と関数
* 第5回 データ構造（数値、⽂字列、リスト、辞書）
    * 文字列
    * リスト
    * タプルと辞書と集合
    * オブジェクトと型
* 第6回: 条件分岐、ファイル⼊出⼒の基本
    * ファイル処理
    * if文
* 第7回: テスト・デバッグ、コードスタイル
    * テスト
* 第8回: 制御フロー（条件分岐、繰り返し、イテレータ、内包表記）
    * 繰り返し文
* 第9回: 関数と例外処理（オブジェクト、クラス、例外処理）
    * 関数
    * クラス
    * 継承
    * 例外処理
* 第10回: Pythonのライブラリ・パッケージ（演算系）
* 第11回: Pythonのライブラリ・パッケージ（グラフ可視化）
* 第12回: Web APIの利活⽤
* 第13回: 総合演習・発表

**授業の概要**  
初⼼者向けの Pythonプログラミング⼊⾨です。  
Pythonの基本⽂法を学ぶだけでなく、コンピューターやプログラミングの基礎知識、データ収集・分析の基礎となる部分を習得することを⽬標 としています。  
「プログラミング応⽤A」 で学ぶための基礎学習にもなってます。  

**到達目標**  
* Pythonで簡単なプログラム開発ができるようになる。
* 様々なデータを収集・分析する準備ができる。
* コンピューターとプログラミングの基本を理解する。

**参考書**
* 柴田 淳（2016）『みんなのPython 第4版』SBクリエイティブ ISBN：9784797389463
* 寺田 学 他（2023）『Pythonデータ分析 実践ハンドブック 実務で使えるデータ加工のテクニック』インプレス ISBN：9784295017745
* Python3 ドキュメント（<https://docs.python.org/ja/3/>）
* ゼロからのPython入門講座（<https://www.python.jp/train/index.html>）  

**授業の進め方**
* 講義形式
    * プログラミング説明
    * 課題説明
* 実習形式
    * 各自でプログラミング演習
    * 課題に取り組む

**授業の進め方の補足**
* 各授業日ごとに簡単な小アンケート(レポート)を提出してください．アンケート提出で出席とみなします。アンケートの提出期限は、原則として当日の23時59分です。やむを得ない事情により締切後の提出となる場合は、必ず事前に講師までご連絡ください。
* 授業では実際にパソコンを使用して作業を行います。パソコンをご持参のうえ授業に参加してください。
* iPhoneやiPadなどのスマートフォン・タブレット端末でも授業への参加は可能です。ただし、一部の操作が端末によっては行えない場合があります。その際は、遠慮なく講師までご相談ください。
* 教室にはパソコン等の電源設備がございません。演習や課題に取り組む時間は授業時間内に確保しますので、その際は教室内外を自由に移動して作業していただいて構いません。ただし、作業が終了したら教室に戻ってください。

**授業で用いるツール**
* Google Colaboratory (https://colab.google/)
    * ノートブックを開く (https://colab.research.google.com/)
    * 新規ノートブックを作成 (https://colab.research.google.com/?authuser=0#create=true)
* Googleアカウントが必要 (アカウントが無い方は新規登録してください)


**評価方法**
* 授業内小レポート（50％）
    * 毎回の授業日の最後にGoogleフォームに入力する時間をとります
    * レポートの提出をもって出席とみなします　
* 授業への取り組み（20％）
    * 授業での取り組み状況や参加状況を評価します
* 最終課題（30％）
    * 最終課題をレポート形式で提出します

**講師への質問・連絡**
授業に関して質問があった場合は、あまり悩まずに気軽に講師まで連絡してください。また授業の進め方などで意見や感想など特に伝えたいことがあった場合も同様に連絡をしてください。
連絡方法：　以下のいずれかで行ってください。
* 小レポートの自由記述欄への記入
* 講師へメール
* 3SのQ＆Aへの入力

**Python**  
* Pyhon (公式)
    - URL: https://www.python.org/
    - ドキュメント：https://www.python.org/doc/
    - マニュアル：https://docs.python.org/ja/3/
    - Python 標準ライブラリ：https://docs.python.org/ja/3/library/index.html
    - Python For Beginners: https://www.python.org/about/gettingstarted/
    - ダウンロード: https://www.python.org/downloads/
    - Python チュートリアル: https://docs.python.org/ja/3/tutorial/index.html

* Python Japan (日本のコミュニティ)
    - URL: https://www.python.jp/
    - Python環境構築ガイド: https://www.python.jp/install/install.html
    - ゼロからのPython入門講座: https://www.python.jp/train/index.html

**その他のツール**  

* Visual Studio Code (VS Code)
    - Visual Studio Code (VS Code) は、Microsoftが開発した無料で利用できるコードエディターです。
    - 拡張機能が豊富で、カスタマイズ性が高く、開発現場で広く利用されています。
    - 公式サイト: https://azure.microsoft.com/ja-jp/products/visual-studio-code

* Jupyter Notebook
    - Webブラウザ上でPythonなどのコードを実行できるインタラクティブな環境を提供するオープンソースのツールです。
    - データ分析や機械学習の分野で広く利用され、コード、実行結果、メモなどをまとめて記述・管理できるのが特徴です。
    - Google Colabは、Google Driveと連携した、Jupyter Notebookをベースにした開発環境です。名前の通りGoogleが提供しているクラウドサービスです．
    - Jupyter Notebookはパソコン等に設定して実行する対話型実行環境です。
    - JupyterLabは、Jupyter Notebookの後継となる統合開発環境です。従来のNotebookで行えたことはすべてJupyterLabでも可能であり、さらに多くの機能が拡張されています
    - 公式サイト: https://jupyter.org/

* Anaconda
    - 初心者でも簡単にPythonの開発環境をインストーラーを実行するだけで構築可能です。
    - データサイエンスや機械学習に関する作業をパソコンで行うための開発環境です。
    - Python言語を用いたデータ分析やモデリング、可視化などのタスクを簡単に実行できるように設計されています。
    - PythonとR言語の両方が実行可能です。
    - 従業員数200名以上の営利企業では、Anacondaの利用は有料です
    - 公式サイト: https://www.anaconda.com/

* GitHub
    - 公式サイト: https://github.com/
    - ソフトウェア開発者がコードを共有・管理・共同開発するための開発者のためのプラットフォーム
    - 運営会社：GitHub, Inc.（現在はMicrosoftの子会社）
    - プログラムコードのバージョン管理
    - 複数人での共同開発（コラボレーション）

* PyCharm
    - 公式サイト：https://www.jetbrains.com/pycharm/
    - Pythonの統合開発環境（IDE）で、JetBrains社が開発・提供
    - PyCharm 2025.1 から、PyCharm Community と Professional は統合された単一の製品で提供
        - Community（無料: 基本的なPython開発に対応
        - Professional（有料）: Web開発（Django, Flask）、データサイエンス、リモート開発などに対応（学生・教員は無料ライセンスあり）
